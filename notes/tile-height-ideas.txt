changes I need to make to level/tile system:

------
with the concept of tiles having height...
--		- 

tiles have a stack ("TileStack") of layers ("TileStackLayer") made up of an ordered collection of types ("TileType"); the first type is "3D" while any/all subsequent types are "flat".


3D VS FLAT TILETYPES

- all tile stack layers consist of a 3D type at the bottom, with an arbitrary number of flat tiletypes stacked on top of the 3D type.

- 3D types can customize walkable/solid; all flat types are walkable and nonsolid.

- interation events (e.g. touch, attack, interact, etc) on a 3D type are generally the same whether the player is above the type or beside the type.
	- the exception is that you can't use a tile item on a 3D type unless you're on the upper layer. This will likely be a pattern for items used on the "ground".
- for collision events, see below.

- to specify if a type is 3D or flat, TileTypeEnum has two constructors:
	- one for 3D types that takes booleans for walkable and solid
	- one for flat types that assumes walkable=true and solid=false


TILE<->ENTITY COLLISIONS

- entities are considered to be on the layer they *occupy*, not the one they are standing on; an interesting yet sensible similarity to 3D tiletypes.
	- the layer below still receives touch events

- collision checks involve both the layer the player occupies, and the layer the player is standing on; the process is as follows:
	- fetches overlapping tiles as usual
	- queries tile layers at entity layer and ensures none are solid (TileStackLayer has a method that returns if the stack is solid)
	- queries tile layers directly below entity layer and ensures all are walkable (TileStackLayer has a method that returns if the stack can be walked over, one layer up)
	- movement success only if both above queries succeed


ENTITY MOVEMENT BETWEEN LAYERS

- movement is gradual; entity z axis should be a float
	- movement will cause gradual change in tile layer lighting for each layer; see TILE RENDERING below (except not really b/c I haven't fully gotten to that yet)

- ideas for rope/ladder have been discussed on discord; now ideas for stairs:
	- for starters, stairs are independent tiles
	- they face a particular direction, where one side puts you one layer higher than the opposite side (as things tend to go with stairs)
	- stairs are 3D, walkable and not solid; but they have special collision rules:
		- entities are only allowed to penetrate the edge of the stairs that faces the layer they are currently on; movements which put the sprite in a location that intersects either of the other 3 sides will be blocked.
		- however, once the entity has successfully moved onto the stairwell, the next move is allowed to penetrate, or go beyond, either the top or bottom edge of the stairwell. On the move that moves the entity off of the stairwell again, the new position is evaluated:
			- if the new position's coordinate along the axis of the stairs is past the high end, the entity's layer level is set to the upper.
			- if the axis coordiate is past the low end, the entity's layer level is set to the lower.
			- if the axis coordinate/bounding range is still within the length of the stairs, then the move is blocked.


- the new system will likely require less adherence to the policy of using the enum ordinal to limit which tile types can be placed on which...
- the big question is, will I actually need that? When will grass go on sand, or dirt on grass, or sand on snow?
- I think the lesson here is that flat tiles are more decorators than anything; make dirt sandy, make dirt grassy, put a torch on it... still I don't really like it.
	- what are the costs of removing the order restriction on tile placement? TileItems already specify the tiles there, so I honestly don't see it being much of an issue...


TILE RENDERING

- main idea: tile sprites render one layer at a time... but not all layers will be rendered, and those that will can have a number of filters.
- I want to say that tile stack layers will just use the existing method to render, but honestly I haven't pinned down enough trans-layer interation to know what to add.

- keep in mind that 3D types obviously shouldn't overlap flat types on adjacent 3D types; but if you put dirt on stone, the stone will technically overlap the dirt. Neither the stone nor the dirt have overlap sprites I believe, but it still ought to be fixed.

- process to compile sprites for a Tile:
	- start with highest opaque layer below the lowest empty layer; this will be the first stack layer to render
		- compile the layer as described below
	- 

- process to compile sprites for a TileStackLayer:
	- sprite types to worry about:
		- connection sprites for types in layer
		- overlap sprites from adjacent tiles' flat types on the current layer, and then solid types one layer up.
			- adjacent flat type overlaps are intermingled appropriately with types in the current tile and layer, just like with the current rendering system.
		-? should overlap and connection sources be limited to visible types in the adjacent tiles? 
		
	- get highest opaque tiletype in the layer
		- 


- layers can render with a variety of filters
	- transparency: applied to all layers above the lowest air type in a tile stack. multiple air tiles do not increase the transparency.
	- 

- sprite compiling happens one tile at a time, though that's further split into each layer group at a time.
- sprite rendering, on the otherhand, happens across the screen on a per-layer-group basis, from the bottom up. Each new layer group will bring with it entities on that same layer.



- entering fluids will be done with the fluid occupying the layer the player is standing on; aka one layer below.
- fluids cannot be placed on the same layer as the player since doing so would mean the fluid is not contained, and so would wash away.

- got an idea for a possible feature; that idea is to do the opposite as stated above and make the result of interaction or attack explicitly different when approching from the side vs top. Perhaps you can get more leverage with breaking rocks or something. Just an idea though.

---
other notes
---


- entities get final say on whether they can walk on a tile. This is the current system.
- shadows are now an overlap sprite applied by all top-level solid tiles, on adjacent tiles that have a lower top-level height.
- air may not need to exist, EXCEPT to hold shadow sprites... ie AIR may be renamed to SHADOW. This depends on if there are uses of having a filler type for empty layer groups.


I just thought of water having multiple states of "filledness", which lead me to a full climate simulation lol

---
old
---
- consider for a layer: is walkable?, is solid?, if solid then is top walkable?
- consider layer group transitions. A layer group is always grounded by a tiletype which embodies the top of a solid tiletype.
	- the bottom group will have a special version of the upper-tile tiletype that points back to itself for the main type.


- what *is* new is if non-walkable tiles should be walkable if you're on the layer above.
	- is there the possibility that a tile is walkable both below and above?
	- yes, and if an entity somehow enters the upper layer of these two, the entity will fall to the lower level

- solid property contains solid bool and "walkable above" bool. If not solid, then the "walkable above" bool is ignored. Walkable bool is separate.
	- default solid property constructor means not solid; a bool in the constructor means solid, and the bool specifies if the top is walkable.

