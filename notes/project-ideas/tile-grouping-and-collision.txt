--context--
was originally thinking about island layouts, but that led to item crafting, which led to representation and tiles...
And now here we are, planning out methods for multi-tile sprites/constructs.

I had the idea of having blueprints that were just preset arrangements of tiles and entities, and maybe that could be a thing for creative mode, but survival will not feature it since it would allow placement of things far away and might conflict with the necessity of tools being used to craft things.

--idea--
Instead, this is going to be about sprites that are one object but span multiple tiles.

there are a couple considerations that need to be made:
- can sprites span multiple tiles only to show height?
- if so, how to differentiate that from sprites that are just many tiles long on the ground?

I think, for now, I'm going to impose a rule that sprites cannot use multiple tiles to show height. The complications that come from trying to show depth with a perspective like this are problems that I've tried to tackle many times before, but to no avail. Better to forego it entirely for now and make something that actually works.

So, this means that there will not be much in the way of stacking tiles on top of each other unless they are ground layers, because there isn't room for showing the depth. So wall sprites for example will show the side and top in the same tile.

This simplfies any considerations I would have to make for depth such as overlapping sprites when one is on the tile above another. It will be given that the collision bounds on the tile are the entire sprite, and if there are renderable pixels outside those bounds, then it has been deemed okay that entities will clip between in front and behind the sprite as their y value changes.

So, the only consideration left is: what are the collision bounds of the sprite?
This will be specified later on a sprite-by-sprite basis, but for now I'm going to try and see if I can get by with having the whole sprite either be collidable or not collidable.

To detemine how many tiles a sprite uses, simply do some math with the sprite dimensions; it spans as many tiles as its pixels suggest.
This means using extra pixels for height overlap isn't an option, since the game will interpret that as taking 2+ tiles of space.
When detemining the tiles of a large sprite, it will only add to the type stack if the pixels for that tile are not completely transparent; if so, then that tile is ignored. This allows non-rectangular sprites to exist without taking up a rectangle of tiles.
This also, in a sort of hacky way, allows you to link arbitrary tiles with a positional offset given in the sprite; i.e. you could have a 3x3 tile sprite that only has pixels in the top left and bottom right, which would set the type for those two tiles to be linked, but leave the tiles in between unaffected. It wastes a lot of sprite space though so it should be used sparingly; another method of linking faraway tiles should be made if it becomes a desireable feature.

For item positioning, camera offset, etc, the coordinates of the specific tile used; this are the default return value for #getLocation.
When placing a tile or referencing its coordinates for the purposes of tile identity or offset, the upper left tile coordinate is used instead; this must be fetched specifically if desired, with #getRootLocation.

now the question that remains is what to do with this new feature; what new sprites will we now make?

--summary--

- sprites can span multiple tiles, but can't use multiple tiles for height
- empty areas in a sprite that cover a whole tile leave that tile unaffected
- these sprites use the same tile type instance across all connected tiles
	- this type holds a reference to the top-left tile position in the sprite, and all other positions
	- tile-specific queries (like rendering) require the tile position, to determine which tile is being referenced
- the Tile class supports these multi-tile sprites with methods like #getAssociatedTiles and #getRootLocation
