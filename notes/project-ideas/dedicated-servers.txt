since multiplayer is not meant to be in the MMO style, dedicated servers will not exist only to serve a single world
they will instead serve as hosting platforms on which people can host their own local worlds.

- dedicated servers will maintain a list of the worlds they are currently hosting
	- each world has a name
- server runtime can optionally limit who is allowed to host a game
	- only accept from certain IP addresses
- hosted game servers can optionally limit who is allowed to join the game
	- password protection
	- host must approve join requests
	- only list game to certain IP addresses?

- server runtime can be made to host any number of servers locally as well
	- acts like a normal remote host on high level
		- save method goes through an object that has a reference to a connection where the data is sent across
		- for local worlds (single player and local server worlds), connection stays within the runtime
		- no need for a "host player" for sending server data, player profiles will be separate from host profile
			- i.e. not an issue if the host isn't a player (like with local server worlds)
	- when starting a server world, the host is determined by who is sending the world data
		- single player world
			- never opens server socket, only uses API endpoint with save callback
			- uses another API endpoint to create an OP player
		- multiplayer local world
			- gets world data from API endpoint with save callback
		- multiplayer remote world 
			- reads world data from a packet, save callback sends info to this connection
			- connections from the same IP are given OP
	- the main server runtime is always created by a local manager
		- manager provides interface for:
			- saving data (server given a callback)
			- OP-checking players
		- manager tells server instance:
			- when there are new players (wraps connection so server never actually sees networking)
			- may ask server to save and/or exit
		

main menu:
- single player
	- select world - or - create a new world
- multiplayer
	- join server
		- provide host ip
			- select remote world
	- host server
		- self-host (note about port forwarding)
			- select local world - or - create a new world
		- remote host
			- provide host ip
				- select local world - or - create a new world
