- reverting crafted objects
	- simple tools and crafted materials can be reduced to materials at a workbench that can craft them
	- crafted tiles and placed objects can be destroyed if hit enough with the right item, but they will yield mostly scrap materials like broken wood, warped metal, etc
	- instead, either pick up the object and deconstruct it at a workbench, or if it's a tile, then use the tools used for making it to deconstruct it. This will usually yield normal materials, often the same ones used to make it, or a subset of them.
	- scrap materials can sometimes be returned to normal, or be used for other purposes

- crafting recipes relate to a workbench, a hammer, or neither (can be done with your hands)
	- workbenches can only produce items
	- hammers can only produce tiles and entities (WorldObjects)
	- there are couple handmade recipes for both categories

old note:
I think the workbench(es) should be 2x1 tiles. Would make it more substantial. But that can wait until the rest of this is implemented.

notes on how blueprint recipes work:

- when a recipe is selected, you exit the crafting screen and enter a sort of "blueprint" mode where your active item is overridden (maybe show it as the hammer?)
	- right click will cancel and return to your previously held item
	- at the selection cursor is a semitransparent sprite of the tile or entity that will be placed
	- tinted red if the current position is invalid
	- implementation notes:
		- server will send sprite reference (name,atlas sort of thing) and a method of determining whether a given tile is valid or not
		- validation method could consist of checking for entities, checking tile types, or perhaps some other things
		- the client has to be able to carry out this check with the information it has, so there are some very specific things that might not be possible to do, like ignore only a certain type of mob or something.
		- but it is unlikely I'll need to know something that specific to know if I can place a tile/entity, so it'll probably be fine.
- when a valid location is chosen, the server is queried to do the build
	- later (when considering laggy environments): the client will add a tiletype to show a waiting symbol of sorts on the tile before hearing back, so the user isn't left wondering if it processed
	- cannot build another object until we hear back; we need to know whether materials were used
	- if it fails, the client will simply stop the animation, if it hasn't stopped already, and maybe do something extra to show the player that the spot was apparently actually invalid
		- for now, I'll probably just display a message in the chat log or something
	- if it succeeds, then the client will remove the materials and the server is expected to send a tile update or entity addition to take care of whatever the recipe was supposed to make
		- later: to pass the time during the build delay, the server will update the tile with a TileType that does nothing but play a looping build animation; once the time has elapsed, this will be removed and the entity or tile proper will be added.
			- this should be different from the anim played by the client; the client anim is meant as filler and will overwritten at an unknown time, so ideally it should look good no matter when it's cut off
				- come to think of it, I could probably just make a simple image like a checkmark or a hammer and wrench... that will display over the tile just fine.
				- I could also turn the build cursor into a clock for the time that it won't respond to further build requests.
			- since the pre-build anim was a tile type as well, by virtue of the server updating the tile, the pre-build anim will be stopped and replaced with the main build anim
	- if the server finds that the client has insufficient materials for the build, it will send back an inventory update to fix any mismatch in inventory tracking.
- once the first one is taken care of, if the player has enough resources for another build, the whole process will repeat; otherwise, the crafting screen will reappear to show that there are not enough resources.
	- unless the client has changed held items, in which case this is dropped.
