MISC
- some tiles can be ramp-like, and bridge between tiles with different height levels (these should prob only bridge a one-layer difference) <-- <<this idea is fishy>>

- mountains have many layers of rock; the top-most rock layer of any tile on the mountain will have dirt on it, maybe grass
- the rock will still be visible on the edges


LAYERS/CRUST
- distinction between tile layers is at times unclear; tiles from the layer below may be interacted with.
- at the bottom of all tile stacks, instead of hole, use crust
	- crust is neither walkable nor breakable
	- on top of crust is compressed/packed dirt
		- it takes vertical space
		- a couple hits to remove


BREAKABILITY
sometimes the game will not allow you to break certain blocks that are normally breakable.
- a message or icon will appear in these situations to let you know somewhat what the problem is
- examples:
	- you are trying to break the tile you're standing on (message appears: "I'll fall!" or icon of boots with red circle cross over them)
	- trying to break a tile that is supporting tiletypes above it, and those tiletypes don't have support from adjacent tiles (message: "Unstable!" or icon of badly stacked blocks with motion lines)
	- trying to break / interact with the ground tile under a vertical tile (message: "Can't reach!" or icon of two stacked blocks with a cross through the bottom block)


PROPERTIES
separate tiletype properties:
- walkable / or custom collision bounds (common)

- vertical space / height (common)
	- vertical tiletype sprites are a little more than 32 pixels tall; they have a front-face that stands them up a bit
	- may have to be faded (ground tiles: renderer doesn't worry about fading or draw order)
		- all tiletypes existing above the player's current height, that obstruct tiles above them ("forward" of them technically) should be faded. That way, paths behind higher tiles are visible, but solid areas without any rendering behind them are not rendered.
			- when switching layers, the new layer should fade in gradually in accordance to the entity's z coordinate.
			- Note: caves will not be an issue because they have solid tiles above them. See section on caves below for more cave details
	- ground tiles have a different attack key than tiles with height
		- using the ground-tile key on a tile with height doesn't work (you have to remove the height tile first)
		- ground tiles are considered to be any tile with the same height level as the one you're standing on

- walkable on top / top collision bounds (common)
	- if vertical space is used, then you can't fall through the tile. Collision bounds determine walkability.
	- if no vertical space used, tile can be fallen through; if top collision bounds exists, it is respected, and objects only fall through the tile if they can fit around the collision bounds, AND the tile below is walkable, AND there is only a one-layer difference

- render occlusion (client); does this tiletype have a fully opaque sprite? If so, no tiles underneath it need to / should be rendered.

- light occlusion (client); does this tiletype block light from passing through?
	- all object lighting will be subject to occlusion; sunlight is the only exception, however attempts may be made to have light shadows

- update manager (server)
- destruction manager (server)
- transition manager (server)
- light radius (client)
- swim animation (client) - edit
- transitions (client)


CAVES
- When entering a cave, the structure above the cave will be faded
- This will leave all tiles at the height of the cave renderable
	- whether they are actually rendered (aka are visible) depends on the lighting
	- As stated above, light will be blocked by light-blocking tiletypes


DOOR FRAMES
note about sprite rendering with door frames:
the problem with previous attempts to ensure correct rendering with sprites around door frames is that sprite vertical height (not pixels necessarily, but world height...which may be pixels) was never taken into account for collision detection. If the sprite is too tall, aka tall enough where it touches the top of the door frame, it shouldn't be able to go through the door.
Now, an easier and arguably better solution (in my case at least) is probably to just not make the sprites of door-traversing entities too tall for doors.
Another solution, though, is to not use door frames, and instead just have a hinged door that swings on a hinge with two different collision boxes, one for the closed door and one for the open door.


COORDINATES
with a height map, the rendering coordinate system splits from the position coordinate system.
- Rendering has only x and y, but position has x, y, and z.
- the z coordinate is a float too
- 


IMPL PLAN
- first is making the system for tracking vertical tiletypes and raising them up
- player moving between layers
	- auto-jump when approaching ledge with one level height difference
	- NO LOSS OF SPEED compared to walking straight
